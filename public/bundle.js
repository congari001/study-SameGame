/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./ts/appBase.ts":
/*!***********************!*\
  !*** ./ts/appBase.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AppBase = void 0;\r\nclass AppBase {\r\n    constructor() {\r\n        this._base_events = {};\r\n    }\r\n    // クラス名取得\r\n    getClassName() {\r\n        return this.constructor.name;\r\n    }\r\n    // イベントリスナー登録\r\n    on(ev_name, func) {\r\n        if (typeof this._base_events[ev_name] === \"undefined\") {\r\n            this._base_events[ev_name] = document.createElement(\"event\");\r\n        }\r\n        this._base_events[ev_name].addEventListener(ev_name, func);\r\n    }\r\n    // イベント解除\r\n    off(ev_name, func) {\r\n        if (typeof this._base_events[ev_name] === \"undefined\") {\r\n            return;\r\n        }\r\n        if (typeof func === \"function\") {\r\n            this._base_events[ev_name].removeEventListener(ev_name, func);\r\n        }\r\n        else {\r\n            delete this._base_events[ev_name];\r\n        }\r\n    }\r\n    // イベント発行\r\n    emit(ev_name, params) {\r\n        if (typeof this._base_events[ev_name] !== \"undefined\") {\r\n            this._base_events[ev_name].dispatchEvent(new CustomEvent(ev_name, { detail: params }));\r\n        }\r\n    }\r\n}\r\nexports.AppBase = AppBase;\r\n\n\n//# sourceURL=webpack://samegame/./ts/appBase.ts?");

/***/ }),

/***/ "./ts/app/coreBase.ts":
/*!****************************!*\
  !*** ./ts/app/coreBase.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CoreBase = void 0;\r\nconst appBase_1 = __webpack_require__(/*! @root/appBase */ \"./ts/appBase.ts\");\r\nclass CoreBase extends appBase_1.AppBase {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\nexports.CoreBase = CoreBase;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/coreBase.ts?");

/***/ }),

/***/ "./ts/app/core/game.ts":
/*!*****************************!*\
  !*** ./ts/app/core/game.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.game = void 0;\r\nconst GAME = __importStar(__webpack_require__(/*! @root/const/GAME */ \"./ts/const/GAME.ts\"));\r\nconst coreBase_1 = __webpack_require__(/*! @root/app/coreBase */ \"./ts/app/coreBase.ts\");\r\nconst imageBox_1 = __webpack_require__(/*! @root/app/core/imageBox */ \"./ts/app/core/imageBox.ts\");\r\nconst objBox_1 = __webpack_require__(/*! @root/app/core/objBox */ \"./ts/app/core/objBox.ts\");\r\nconst gameCanvasMng_1 = __webpack_require__(/*! @root/app/core/gameCanvasMng */ \"./ts/app/core/gameCanvasMng.ts\");\r\nconst sceneMng_1 = __webpack_require__(/*! @root/app/sceneMng */ \"./ts/app/sceneMng.ts\");\r\nconst util_1 = __webpack_require__(/*! @root/lib/util */ \"./ts/lib/util.ts\");\r\nclass Game extends coreBase_1.CoreBase {\r\n    constructor() {\r\n        super();\r\n        this._fps = 0;\r\n        this.time = new util_1.Time();\r\n        this.imageBox = new imageBox_1.ImageBox();\r\n        this.objBox = new objBox_1.ObjBox();\r\n        this.sceneMng = new sceneMng_1.SceneMng();\r\n        this.canvasMng = new gameCanvasMng_1.GameCanvasMng();\r\n        console.log(\"create game.\");\r\n    }\r\n    get fps() {\r\n        return this._fps;\r\n    }\r\n    // _fps設定\r\n    setFPS(_fps) {\r\n        this._fps = parseInt((1000 / _fps).toString());\r\n    }\r\n    // 起動\r\n    async Start() {\r\n        console.log(\"ゲーム起動\");\r\n        console.log(\"初期設定\");\r\n        this.setFPS(GAME.FPS);\r\n        this.canvasMng.create(\"main\", GAME.CANVAS.SIZE.W, GAME.CANVAS.SIZE.H);\r\n        this.sceneMng.setFirstScene(\"title\");\r\n        // 画像読み込み\r\n        console.log(\"ゲームループ開始\");\r\n        let roopCnt = 0; // ループ回数\r\n        let updateCnt = 0; // 処理更新回数\r\n        let elapse = 0; // 経過時間\r\n        let delay = 0; // 処理遅延時間\r\n        let loadingImage = null; // 画像読み込み状況\r\n        this.time.start();\r\n        while (true) {\r\n            await new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    elapse = this.time.elapse;\r\n                    if (elapse >= this._fps) {\r\n                        this.time.stop();\r\n                        this.time.restart();\r\n                        delay = elapse - this._fps;\r\n                        updateCnt = 0;\r\n                        loadingImage = this.imageBox.getLoadStatus();\r\n                        if (loadingImage[\"isCompleted\"]) {\r\n                            do {\r\n                                updateCnt++;\r\n                                delay = Math.max(delay - this._fps, 0);\r\n                                this.sceneMng.update();\r\n                            } while (delay > this._fps);\r\n                        }\r\n                        roopCnt++;\r\n                        loadingImage = this.imageBox.getLoadStatus();\r\n                        if (loadingImage[\"isCompleted\"]) {\r\n                            this.sceneMng.draw();\r\n                        }\r\n                    }\r\n                    return resolve();\r\n                });\r\n            });\r\n            //if (roopCnt>=1800) break;\r\n        }\r\n        console.log(\"ゲーム終了\");\r\n    }\r\n}\r\nexports.game = new Game();\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/core/game.ts?");

/***/ }),

/***/ "./ts/app/core/gameCanvas.ts":
/*!***********************************!*\
  !*** ./ts/app/core/gameCanvas.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameCanvas = void 0;\r\nconst coreBase_1 = __webpack_require__(/*! @root/app/coreBase */ \"./ts/app/coreBase.ts\");\r\nconst class_1 = __webpack_require__(/*! @root/lib/class */ \"./ts/lib/class.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nclass GameCanvas extends coreBase_1.CoreBase {\r\n    constructor(width, height) {\r\n        super();\r\n        this._canvas = this._createCanvas(width, height);\r\n        this.isUpdate = true;\r\n    }\r\n    // ゲームキャンバス作成\r\n    _createCanvas(width, height) {\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        canvas.style.border = \"2px solid\";\r\n        // クリックイベント設定\r\n        canvas.addEventListener('click', e => {\r\n            // マウス座標をキャンバス内座標と合わせる\r\n            const rect = canvas.getBoundingClientRect();\r\n            const pos = new class_1.Position(e.clientX - rect.left, e.clientY - rect.top);\r\n            game_1.game.objBox.emit('click', { position: pos });\r\n        });\r\n        return canvas;\r\n    }\r\n    // キャンバスを追加\r\n    appendChild(divId) {\r\n        let div = document.getElementById(divId);\r\n        if (div === null) {\r\n            throw new Error(\"指定のIDのエレメントが見つかりませんでした。divId=\" + divId);\r\n        }\r\n        div.appendChild(this._canvas);\r\n    }\r\n    // コンテキストを取得\r\n    getContext() {\r\n        return this._canvas.getContext(\"2d\");\r\n    }\r\n    // キャンバスをクリア\r\n    clear() {\r\n        let ctx = this.getContext();\r\n        if (ctx) {\r\n            ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        }\r\n    }\r\n}\r\nexports.GameCanvas = GameCanvas;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/core/gameCanvas.ts?");

/***/ }),

/***/ "./ts/app/core/gameCanvasMng.ts":
/*!**************************************!*\
  !*** ./ts/app/core/gameCanvasMng.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameCanvasMng = void 0;\r\nconst coreBase_1 = __webpack_require__(/*! @root/app/coreBase */ \"./ts/app/coreBase.ts\");\r\nconst gameCanvas_1 = __webpack_require__(/*! @root/app/core/gameCanvas */ \"./ts/app/core/gameCanvas.ts\");\r\nclass GameCanvasMng extends coreBase_1.CoreBase {\r\n    constructor() {\r\n        super();\r\n        this._canvas = null;\r\n    }\r\n    /**\r\n     * キャンバス作成\r\n     * @param divId キャンバスを追加するdivのid\r\n     * @param width キャンバス幅\r\n     * @param height キャンバス高さ\r\n     */\r\n    create(divId, width, height) {\r\n        this._canvas = new gameCanvas_1.GameCanvas(width, height);\r\n        this._canvas.appendChild(divId);\r\n    }\r\n    /**\r\n     * キャンバス取得\r\n     */\r\n    getCanvas() {\r\n        return this._canvas;\r\n    }\r\n    /**\r\n     * キャンバスをすべてクリア\r\n     */\r\n    clear() {\r\n        var _a;\r\n        (_a = this._canvas) === null || _a === void 0 ? void 0 : _a.clear();\r\n    }\r\n}\r\nexports.GameCanvasMng = GameCanvasMng;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/core/gameCanvasMng.ts?");

/***/ }),

/***/ "./ts/app/core/imageBox.ts":
/*!*********************************!*\
  !*** ./ts/app/core/imageBox.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ImageBox = void 0;\r\nconst coreBase_1 = __webpack_require__(/*! @root/app/coreBase */ \"./ts/app/coreBase.ts\");\r\nclass ImageBox extends coreBase_1.CoreBase {\r\n    constructor() {\r\n        super();\r\n        this._box = {};\r\n        this._loadingImageList = [];\r\n        this._imageNum = 0;\r\n    }\r\n    /**\r\n     * 画像追加\r\n     */\r\n    add(path) {\r\n        if (!this._box.hasOwnProperty(path)) {\r\n            let img = new Image();\r\n            img.src = path;\r\n            this._box[path] = img;\r\n            this._loadingImageList.push(this._box[path]);\r\n            this._imageNum += 1;\r\n        }\r\n        else {\r\n            //console.log(\"指定のパスの画像は登録済みです。path=\"+path);\r\n        }\r\n    }\r\n    /**\r\n     * 画像取得\r\n     */\r\n    get(path) {\r\n        if (!this._box.hasOwnProperty(path)) {\r\n            throw new Error(\"指定のパスの画像は登録されていません。path=\" + path);\r\n        }\r\n        return this._box[path];\r\n    }\r\n    /**\r\n     * 画像の読み込み状況を更新する\r\n     */\r\n    _updLoadingImageList() {\r\n        let len = this._loadingImageList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (this._loadingImageList[i].complete) {\r\n                this._loadingImageList.splice(i, 1);\r\n                i--;\r\n                len--;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 画像の読み込み状況を取得する\r\n     */\r\n    getLoadStatus() {\r\n        this._updLoadingImageList();\r\n        return {\r\n            \"isCompleted\": !this._loadingImageList.length,\r\n            \"imageNum\": this._imageNum,\r\n            \"completeNum\": this._imageNum - this._loadingImageList.length\r\n        };\r\n    }\r\n}\r\nexports.ImageBox = ImageBox;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/core/imageBox.ts?");

/***/ }),

/***/ "./ts/app/core/objBox.ts":
/*!*******************************!*\
  !*** ./ts/app/core/objBox.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ObjBox = void 0;\r\nconst coreBase_1 = __webpack_require__(/*! @root/app/coreBase */ \"./ts/app/coreBase.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nclass ObjBox extends coreBase_1.CoreBase {\r\n    constructor() {\r\n        super();\r\n        this._box = [];\r\n        this._uidBox = {};\r\n        this._delBox = [];\r\n        this._isSort = true;\r\n        // キャンバスのクリックイベントをオブジェクトに転送する\r\n        this.on('click', (params) => {\r\n            const clickX = params.detail.position.x;\r\n            const clickY = params.detail.position.y;\r\n            for (let i = this._box.length - 1; 0 <= i; i--) {\r\n                const obj = this._box[i];\r\n                if (!obj.isRemove && obj.image && obj.image.active) {\r\n                    const left = obj.pos.x;\r\n                    const top = obj.pos.y;\r\n                    const right = left + obj.image.width;\r\n                    const bottom = top + obj.image.height;\r\n                    if (left <= clickX && clickX <= right) {\r\n                        if (top <= clickY && clickY <= bottom) {\r\n                            obj.emit('click', params);\r\n                            console.log(`click to [y=${clickY}][x=${clickX}]`);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * オブジェクト追加\r\n     */\r\n    add(obj) {\r\n        if (this.isExists(obj.uniqueId)) {\r\n            return false;\r\n        }\r\n        this._box.push(obj);\r\n        this._uidBox[obj.uniqueId] = obj;\r\n        this._isSort = true;\r\n        return true;\r\n    }\r\n    /**\r\n     * オブジェクト取得\r\n     */\r\n    get(uid) {\r\n        if (!this.isExists(uid)) {\r\n            return null;\r\n        }\r\n        return this._uidBox[uid];\r\n    }\r\n    getByTag(tag) {\r\n        let result = [];\r\n        let cnt = this._box.length;\r\n        for (let i = 0; i < cnt; i++) {\r\n            if (this._box[i].hasTag(tag)) {\r\n                result.push(this._box[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * オブジェクト削除\r\n     */\r\n    del(uid) {\r\n        if (!this._uidBox.hasOwnProperty(uid)) {\r\n            return false;\r\n        }\r\n        delete this._uidBox[uid];\r\n        let cnt = this._box.length;\r\n        for (let i = 0; i < cnt; i++) {\r\n            if (this._box[i].uniqueId == uid) {\r\n                let obj = this._box.splice(i, 1).shift();\r\n                if (obj) {\r\n                    this._delBox.push(obj);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * オブジェクト存在確認\r\n     */\r\n    isExists(uid) {\r\n        return this._uidBox.hasOwnProperty(uid) && !this._uidBox[uid].isRemove;\r\n    }\r\n    /**\r\n     * オブジェクトの更新\r\n     */\r\n    update() {\r\n        let objects = [];\r\n        let len = this._box.length;\r\n        for (let i = 0; i < len; i++) {\r\n            objects.push(this._box[i]);\r\n            if (this._box[i].isNew) {\r\n                this._box[i].init();\r\n                this._box[i].initDone();\r\n            }\r\n        }\r\n        for (let i = 0; i < len; i++) {\r\n            if (!objects[i].isRemove) {\r\n                objects[i].moveToTarget();\r\n                objects[i].update();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 削除オブジェクトの後処理\r\n     */\r\n    final() {\r\n        let len = this._delBox.length;\r\n        for (let i = 0; i < len; i++) {\r\n            this._delBox[i].final();\r\n            this._delBox.splice(i, 1);\r\n            i--;\r\n            len--;\r\n        }\r\n    }\r\n    draw() {\r\n        if (this._isSort) {\r\n            this._box.sort((a, b) => { return a.drawPriority - b.drawPriority; });\r\n            this._isSort = false;\r\n        }\r\n        game_1.game.canvasMng.clear();\r\n        let len = this._box.length;\r\n        for (let i = 0; i < len; i++) {\r\n            this._box[i].draw();\r\n        }\r\n    }\r\n    count() {\r\n        return this._box.length;\r\n    }\r\n}\r\nexports.ObjBox = ObjBox;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/core/objBox.ts?");

/***/ }),

/***/ "./ts/app/core/objImage.ts":
/*!*********************************!*\
  !*** ./ts/app/core/objImage.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ObjImage = void 0;\r\nconst coreBase_1 = __webpack_require__(/*! @root/app/coreBase */ \"./ts/app/coreBase.ts\");\r\nconst class_1 = __webpack_require__(/*! @root/lib/class */ \"./ts/lib/class.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nclass ObjImage extends coreBase_1.CoreBase {\r\n    constructor(path, priority = 0, active = true) {\r\n        super();\r\n        this._image = game_1.game.imageBox.get(path);\r\n        this._chipPos = new class_1.Position(0, 0);\r\n        this._chipSize = new class_1.Size(this._image.width, this._image.height);\r\n        this._chipTable = new class_1.Table(0, 0);\r\n        this._drawSize = new class_1.Size(this._image.width, this._image.height);\r\n        this.active = active;\r\n        this.priority = priority;\r\n    }\r\n    get width() {\r\n        return this._drawSize.width;\r\n    }\r\n    get height() {\r\n        return this._drawSize.height;\r\n    }\r\n    /**\r\n     * 画像切り分け設定\r\n     */\r\n    setChipInfo(chipX, chipY, chipW, chipH) {\r\n        this._chipPos.x = chipX;\r\n        this._chipPos.y = chipY;\r\n        this._chipSize.width = chipW;\r\n        this._chipSize.height = chipH;\r\n    }\r\n    /**\r\n     * 画像チップ選択（横）\r\n     */\r\n    setChipTableColumn(column) {\r\n        this._chipTable.column = column;\r\n    }\r\n    /**\r\n     * 画像チップ選択（縦）\r\n     */\r\n    setChipTableRecord(record) {\r\n        this._chipTable.record = record;\r\n    }\r\n    /**\r\n     * 画像描画設定\r\n     */\r\n    setDrawInfo(drawW, drawH) {\r\n        this._drawSize.width = drawW;\r\n        this._drawSize.height = drawH;\r\n    }\r\n    /**\r\n     * 画像描画\r\n     */\r\n    draw(drawPos) {\r\n        var _a, _b;\r\n        if (this.active) {\r\n            if (this._image.complete) {\r\n                (_a = game_1.game.canvasMng.getCanvas()) === null || _a === void 0 ? void 0 : _a.getContext().drawImage(this._image, this._chipPos.x + (this._chipSize.width * this._chipTable.column), this._chipPos.y + (this._chipSize.height * this._chipTable.record), this._chipSize.width, this._chipSize.height, drawPos.x, drawPos.y, this._drawSize.width, this._drawSize.height);\r\n            }\r\n            else {\r\n                (_b = game_1.game.canvasMng.getCanvas()) === null || _b === void 0 ? void 0 : _b.getContext().fillRect(drawPos.x, drawPos.y, this._drawSize.width, this._drawSize.height);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ObjImage = ObjImage;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/core/objImage.ts?");

/***/ }),

/***/ "./ts/app/objBase.ts":
/*!***************************!*\
  !*** ./ts/app/objBase.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ObjBase = void 0;\r\nconst appBase_1 = __webpack_require__(/*! @root/appBase */ \"./ts/appBase.ts\");\r\nconst objImage_1 = __webpack_require__(/*! @root/app/core/objImage */ \"./ts/app/core/objImage.ts\");\r\nconst util_1 = __webpack_require__(/*! @root/lib/util */ \"./ts/lib/util.ts\");\r\nconst class_1 = __webpack_require__(/*! @root/lib/class */ \"./ts/lib/class.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nconst GAME_1 = __webpack_require__(/*! @root/const/GAME */ \"./ts/const/GAME.ts\");\r\nclass ObjBase extends appBase_1.AppBase {\r\n    constructor() {\r\n        super();\r\n        this._image = null;\r\n        this._uniqueId = util_1.uniqueId.create();\r\n        this._pos = new class_1.Position();\r\n        this._targetPos = new class_1.Position();\r\n        this._moveFrameCnt = -1;\r\n        this._parentId = \"\";\r\n        this._childrenId = [];\r\n        this._tags = {};\r\n        this._isNew = true;\r\n        this._isRemove = false;\r\n    }\r\n    get image() {\r\n        return this._image;\r\n    }\r\n    setImageInfo(imageInfo, drawSize, priority = 0, active = true) {\r\n        this.setImage(imageInfo.PATH, priority, active);\r\n        if (this._image != null) {\r\n            this._image.setChipInfo(imageInfo.CHIP.X, imageInfo.CHIP.Y, imageInfo.CHIP.W, imageInfo.CHIP.H);\r\n            this._image.setDrawInfo(drawSize.W, drawSize.H);\r\n        }\r\n    }\r\n    get uniqueId() {\r\n        return this._uniqueId;\r\n    }\r\n    get parent() {\r\n        return game_1.game.objBox.get(this._parentId);\r\n    }\r\n    get children() {\r\n        let children = [];\r\n        let cnt = this._childrenId.length;\r\n        for (let i = 0; i < cnt; i++) {\r\n            let child = game_1.game.objBox.get(this._childrenId[i]);\r\n            if (child != null) {\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n    get pos() {\r\n        let x = this._pos.x;\r\n        let y = this._pos.y;\r\n        if (this.parent != null) {\r\n            x += this.parent.pos.x;\r\n            y += this.parent.pos.y;\r\n        }\r\n        return new class_1.Position(x, y);\r\n    }\r\n    get drawPriority() {\r\n        if (this._image == null) {\r\n            return 0;\r\n        }\r\n        return this._image.priority;\r\n    }\r\n    get isNew() {\r\n        return this._isNew;\r\n    }\r\n    initDone() {\r\n        this._isNew = false;\r\n    }\r\n    get isRemove() {\r\n        return this._isRemove;\r\n    }\r\n    setPos(pos) {\r\n        this._moveFrameCnt = -1;\r\n        this._targetPos.x = pos.x;\r\n        this._targetPos.y = pos.y;\r\n        this._pos.x += pos.x;\r\n        this._pos.y += pos.y;\r\n    }\r\n    moveTo(targetPos, frameCnt) {\r\n        this._moveFrameCnt = frameCnt;\r\n        this._targetPos.x = targetPos.x;\r\n        this._targetPos.y = targetPos.y;\r\n    }\r\n    moveToTarget() {\r\n        if (1 <= this._moveFrameCnt) {\r\n            this._pos.x += (this._targetPos.x - this._pos.x) / this._moveFrameCnt;\r\n            this._pos.y += (this._targetPos.y - this._pos.y) / this._moveFrameCnt;\r\n            this._moveFrameCnt--;\r\n        }\r\n        if (0 == this._moveFrameCnt) {\r\n            this._pos.x = this._targetPos.x;\r\n            this._pos.y = this._targetPos.y;\r\n            this._moveFrameCnt = -1;\r\n        }\r\n    }\r\n    init() { }\r\n    update() { }\r\n    final() { }\r\n    setImage(path, priority = GAME_1.DRAW_PRIORITY.DEFAULT, active = true) {\r\n        if (priority < GAME_1.DRAW_PRIORITY.MIN) {\r\n            throw new Error(`指定された描画優先順位が不正です。priority=${priority}, MIN=${GAME_1.DRAW_PRIORITY.MIN}`);\r\n        }\r\n        if (GAME_1.DRAW_PRIORITY.MAX < priority) {\r\n            throw new Error(`指定された描画優先順位が不正です。priority=${priority}, MAX=${GAME_1.DRAW_PRIORITY.MAX}`);\r\n        }\r\n        game_1.game.imageBox.add(path);\r\n        this._image = new objImage_1.ObjImage(path, priority, active);\r\n    }\r\n    draw() {\r\n        if (this._image != null) {\r\n            this._image.draw(this.pos);\r\n        }\r\n    }\r\n    _removeChildlenId(id) {\r\n        let cnt = this._childrenId.length;\r\n        for (let i = 0; i < cnt; i++) {\r\n            if (this._childrenId[i] == id) {\r\n                this._childrenId.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    remove(root = true) {\r\n        let cnt = this._childrenId.length;\r\n        if (root) {\r\n            // 呼び出し元のみ、親の子リストから自身を削除\r\n            if (this.parent != null) {\r\n                this.parent._removeChildlenId(this.uniqueId);\r\n            }\r\n        }\r\n        // 子を削除\r\n        for (let i = 0; i < cnt; i++) {\r\n            let child = game_1.game.objBox.get(this._childrenId[i]);\r\n            if (child != null) {\r\n                child.remove(false);\r\n            }\r\n        }\r\n        // 最後の処理\r\n        this._isRemove = true;\r\n        this.final();\r\n        // boxから自身を削除\r\n        game_1.game.objBox.del(this.uniqueId);\r\n    }\r\n    appendChild(obj) {\r\n        if (obj.parent != null) {\r\n            obj.parent._removeChildlenId(obj.uniqueId);\r\n        }\r\n        obj._parentId = this._uniqueId;\r\n        game_1.game.objBox.add(obj);\r\n        this._childrenId.push(obj.uniqueId);\r\n    }\r\n    setTag(tag) {\r\n        this._tags[tag] = true;\r\n    }\r\n    delTag(tag) {\r\n        delete this._tags[tag];\r\n    }\r\n    hasTag(tag) {\r\n        return this._tags.hasOwnProperty(tag);\r\n    }\r\n    // イベントを親に伝播\r\n    emit(ev_name, params) {\r\n        var _a;\r\n        super.emit(ev_name, params);\r\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.emit(ev_name, params);\r\n    }\r\n}\r\nexports.ObjBase = ObjBase;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/objBase.ts?");

/***/ }),

/***/ "./ts/app/obj/blockObj.ts":
/*!********************************!*\
  !*** ./ts/app/obj/blockObj.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BlockObj = void 0;\r\nconst objBase_1 = __webpack_require__(/*! @root/app/objBase */ \"./ts/app/objBase.ts\");\r\nconst IMAGE_1 = __webpack_require__(/*! @root/const/IMAGE */ \"./ts/const/IMAGE.ts\");\r\nconst GAME_1 = __webpack_require__(/*! @root/const/GAME */ \"./ts/const/GAME.ts\");\r\nconst class_1 = __webpack_require__(/*! @root/lib/class */ \"./ts/lib/class.ts\");\r\nclass BlockObj extends objBase_1.ObjBase {\r\n    constructor(blockIdx, boardPos) {\r\n        var _a;\r\n        super();\r\n        this._blockIdx = blockIdx;\r\n        this._viewType = 0;\r\n        this._boardPos = new class_1.Position();\r\n        this.setImageInfo(IMAGE_1.SAMEGAME.BLOCKLIST[blockIdx], GAME_1.BLOCKSIZE);\r\n        (_a = this.image) === null || _a === void 0 ? void 0 : _a.setChipTableColumn(this._viewType);\r\n        this.setBoardPosition(boardPos);\r\n        // イベント登録\r\n        this.on('click', (params) => {\r\n            switch (true) {\r\n                case this.isNormal: {\r\n                    this.emit('selectBlock', { block: this });\r\n                    break;\r\n                }\r\n                case this.isSelect: {\r\n                    this.emit('removeBlock', { block: this });\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    get idx() {\r\n        return this._blockIdx;\r\n    }\r\n    get viewType() {\r\n        return this._viewType;\r\n    }\r\n    get boardPos() {\r\n        return this._boardPos;\r\n    }\r\n    get isNormal() {\r\n        return this._viewType === 0;\r\n    }\r\n    viewNormal() {\r\n        var _a;\r\n        this._viewType = 0;\r\n        (_a = this.image) === null || _a === void 0 ? void 0 : _a.setChipTableColumn(this._viewType);\r\n    }\r\n    get isSelect() {\r\n        return this._viewType === 1;\r\n    }\r\n    viewSelect() {\r\n        var _a;\r\n        this._viewType = 1;\r\n        (_a = this.image) === null || _a === void 0 ? void 0 : _a.setChipTableColumn(this._viewType);\r\n    }\r\n    convBoardPos2DrawPos(boardPos) {\r\n        return new class_1.Position(boardPos.x * (GAME_1.BLOCKSIZE.W + 1), boardPos.y * (GAME_1.BLOCKSIZE.H + 1));\r\n    }\r\n    setBoardPosition(boardPos) {\r\n        this._boardPos.x = boardPos.x;\r\n        this._boardPos.y = boardPos.y;\r\n        this.setPos(this.convBoardPos2DrawPos(this._boardPos));\r\n    }\r\n    moveToBoardPosition(boardPos) {\r\n        this._boardPos.x = boardPos.x;\r\n        this._boardPos.y = boardPos.y;\r\n        this.moveTo(this.convBoardPos2DrawPos(this._boardPos), 5);\r\n    }\r\n}\r\nexports.BlockObj = BlockObj;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/obj/blockObj.ts?");

/***/ }),

/***/ "./ts/app/obj/samegameMngObj.ts":
/*!**************************************!*\
  !*** ./ts/app/obj/samegameMngObj.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SamegameMngObj = void 0;\r\nconst objBase_1 = __webpack_require__(/*! @root/app/objBase */ \"./ts/app/objBase.ts\");\r\nconst blockObj_1 = __webpack_require__(/*! @root/app/obj/blockObj */ \"./ts/app/obj/blockObj.ts\");\r\nconst class_1 = __webpack_require__(/*! @root/lib/class */ \"./ts/lib/class.ts\");\r\nconst GAME_1 = __webpack_require__(/*! @root/const/GAME */ \"./ts/const/GAME.ts\");\r\nclass SamegameMngObj extends objBase_1.ObjBase {\r\n    constructor() {\r\n        super();\r\n        this._blockColorNum = 4;\r\n        this._boardSize = new class_1.Size(10, 8);\r\n        this._board = [];\r\n    }\r\n    init() {\r\n        this.createBoard();\r\n        this.on('selectBlock', (params) => {\r\n            this.selectBlock(params);\r\n        });\r\n        this.on('removeBlock', () => {\r\n            this.removeBlock();\r\n        });\r\n    }\r\n    boardMap(func) {\r\n        for (let y = 0; y < this._board.length; y++) {\r\n            for (let x = 0; x < this._board[y].length; x++) {\r\n                func(x, y);\r\n            }\r\n        }\r\n    }\r\n    boardCheck(func) {\r\n        for (let y = 0; y < this._board.length; y++) {\r\n            for (let x = 0; x < this._board[y].length; x++) {\r\n                if (func(x, y)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    resetBoard() {\r\n        // 残っているブロックオブジェクトを削除\r\n        this.boardMap((x, y) => {\r\n            var _a;\r\n            (_a = this._board[y][x]) === null || _a === void 0 ? void 0 : _a.remove();\r\n        });\r\n        // 設定中のサイズで空のゲームボードを作る\r\n        this._board = [];\r\n        for (let y = 0; y < this._boardSize.height; y++) {\r\n            this._board[y] = [];\r\n            for (let x = 0; x < this._boardSize.width; x++) {\r\n                this._board[y][x] = null;\r\n            }\r\n        }\r\n        // キャンバスの真ん中に移動させる\r\n        const board_px_w = this._boardSize.width * (GAME_1.BLOCKSIZE.W + 1);\r\n        const board_px_h = this._boardSize.height * (GAME_1.BLOCKSIZE.H + 1);\r\n        this.setPos(new class_1.Position(GAME_1.CANVAS.SIZE.W / 2 - board_px_w / 2, GAME_1.CANVAS.SIZE.H / 2 - board_px_h / 2));\r\n    }\r\n    createBoard() {\r\n        this.resetBoard();\r\n        this.boardMap((x, y) => {\r\n            const blockIdx = Math.round(Math.random() * 1000) % this._blockColorNum;\r\n            const boardPos = new class_1.Position(x, y);\r\n            const block = new blockObj_1.BlockObj(blockIdx, boardPos);\r\n            this._board[y][x] = block;\r\n            this.appendChild(block);\r\n        });\r\n    }\r\n    selectBlock(param) {\r\n        const block = param.detail.block;\r\n        // 選択中のブロックをリセット\r\n        this.boardMap((x, y) => {\r\n            var _a;\r\n            (_a = this._board[y][x]) === null || _a === void 0 ? void 0 : _a.viewNormal();\r\n        });\r\n        // ブロックを選択状態にする\r\n        this.viewSelectAround(block);\r\n    }\r\n    viewSelectAround(block, result = 0) {\r\n        // 自身を選択中にする\r\n        if (block.isNormal) {\r\n            block.viewSelect();\r\n            result++;\r\n        }\r\n        // 隣の同色ブロックを選択状態にする\r\n        let x = block.boardPos.x;\r\n        let y = block.boardPos.y;\r\n        const checkBlockPosList = [\r\n            new class_1.Position(x + 1, y),\r\n            new class_1.Position(x, y + 1),\r\n            new class_1.Position(x - 1, y),\r\n            new class_1.Position(x, y - 1)\r\n        ];\r\n        for (let i = 0; i < checkBlockPosList.length; i++) {\r\n            const pos = checkBlockPosList[i];\r\n            if (typeof this._board[pos.y] === 'undefined' || typeof this._board[pos.y][pos.x] === 'undefined') {\r\n                continue;\r\n            }\r\n            const checkBlock = this._board[pos.y][pos.x];\r\n            if (checkBlock && checkBlock.idx === block.idx && checkBlock.isNormal) {\r\n                checkBlock.viewSelect();\r\n                result = this.viewSelectAround(checkBlock, result + 1);\r\n            }\r\n        }\r\n        // 隣り合った同色ブロックが無い場合は自身の選択状態を解除\r\n        if (result <= 1) {\r\n            block.viewNormal();\r\n        }\r\n        return result;\r\n    }\r\n    removeBlock() {\r\n        this.boardMap((x, y) => {\r\n            const block = this._board[y][x];\r\n            if (block && block.isSelect) {\r\n                block.remove();\r\n                this._board[y][x] = null;\r\n            }\r\n        });\r\n        this.stuffBlock();\r\n        if (this.isGameOver()) {\r\n            this.emit('gameOver', {});\r\n        }\r\n    }\r\n    stuffBlock() {\r\n        const board_x = 0 < this._board.length ? this._board[0].length : 0;\r\n        const board_y = this._board.length;\r\n        // ブロックを下に落とす\r\n        for (let x = 0; x < board_x; x++) {\r\n            for (let y = board_y - 1; 0 < y; y--) {\r\n                const block = this._board[y][x];\r\n                if (block === null) {\r\n                    for (let targetY = y - 1; 0 <= targetY; targetY--) {\r\n                        let targetBlock = this._board[targetY][x];\r\n                        if (targetBlock) {\r\n                            targetBlock.moveToBoardPosition(new class_1.Position(x, y));\r\n                            this._board[y][x] = targetBlock;\r\n                            this._board[targetY][x] = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 縦割れ列を左に詰める\r\n        for (let x = 0; x < board_x - 1; x++) {\r\n            const veaticalClack = this._board[board_y - 1][x] === null;\r\n            if (veaticalClack) {\r\n                for (let targetX = x + 1; targetX < board_x; targetX++) {\r\n                    const block = this._board[board_y - 1][targetX];\r\n                    if (block) {\r\n                        for (let y = 0; y < board_y; y++) {\r\n                            const targetBlock = this._board[y][targetX];\r\n                            if (targetBlock) {\r\n                                targetBlock.moveToBoardPosition(new class_1.Position(x, y));\r\n                                this._board[y][x] = targetBlock;\r\n                                this._board[y][targetX] = null;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isGameOver() {\r\n        return !this.boardCheck((x, y) => {\r\n            // 隣り合った同色ブロックがあるか\r\n            const block = this._board[y][x];\r\n            if (block) {\r\n                const checkBlockPosList = [\r\n                    new class_1.Position(x + 1, y),\r\n                    new class_1.Position(x, y + 1),\r\n                    new class_1.Position(x - 1, y),\r\n                    new class_1.Position(x, y - 1)\r\n                ];\r\n                for (let i = 0; i < checkBlockPosList.length; i++) {\r\n                    const pos = checkBlockPosList[i];\r\n                    if (!this._board[pos.y] || !this._board[pos.y][pos.x]) {\r\n                        continue;\r\n                    }\r\n                    const aroundBlock = this._board[pos.y][pos.x];\r\n                    if (aroundBlock) {\r\n                        if (block.idx === aroundBlock.idx) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n}\r\nexports.SamegameMngObj = SamegameMngObj;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/obj/samegameMngObj.ts?");

/***/ }),

/***/ "./ts/app/sceneBase.ts":
/*!*****************************!*\
  !*** ./ts/app/sceneBase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SceneBase = void 0;\r\nconst appBase_1 = __webpack_require__(/*! @root/appBase */ \"./ts/appBase.ts\");\r\nconst objBase_1 = __webpack_require__(/*! @root/app/objBase */ \"./ts/app/objBase.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nclass SceneBase extends appBase_1.AppBase {\r\n    constructor() {\r\n        super();\r\n        this._rootObj = new objBase_1.ObjBase();\r\n        game_1.game.objBox.add(this._rootObj);\r\n    }\r\n    get root() {\r\n        return this._rootObj;\r\n    }\r\n    init() { }\r\n    update() {\r\n        game_1.game.objBox.update();\r\n        game_1.game.objBox.final();\r\n    }\r\n    draw() {\r\n        game_1.game.objBox.draw();\r\n    }\r\n}\r\nexports.SceneBase = SceneBase;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/sceneBase.ts?");

/***/ }),

/***/ "./ts/app/sceneFactory.ts":
/*!********************************!*\
  !*** ./ts/app/sceneFactory.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SceneFactory = void 0;\r\nconst titleScene_1 = __webpack_require__(/*! @root/app/scenes/titleScene */ \"./ts/app/scenes/titleScene.ts\");\r\nconst gameScene_1 = __webpack_require__(/*! @root/app/scenes/gameScene */ \"./ts/app/scenes/gameScene.ts\");\r\nclass SceneFactory {\r\n    get title() {\r\n        return new titleScene_1.TitleScene();\r\n    }\r\n    get game() {\r\n        return new gameScene_1.GameScene();\r\n    }\r\n}\r\nexports.SceneFactory = SceneFactory;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/sceneFactory.ts?");

/***/ }),

/***/ "./ts/app/sceneMng.ts":
/*!****************************!*\
  !*** ./ts/app/sceneMng.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SceneMng = void 0;\r\nconst appBase_1 = __webpack_require__(/*! @root/appBase */ \"./ts/appBase.ts\");\r\nconst sceneFactory_1 = __webpack_require__(/*! @root/app/sceneFactory */ \"./ts/app/sceneFactory.ts\");\r\nclass SceneMng extends appBase_1.AppBase {\r\n    constructor() {\r\n        super();\r\n        this._nowScene = null;\r\n        this._nextScene = null;\r\n        this._instance = null;\r\n        this._factory = new sceneFactory_1.SceneFactory();\r\n    }\r\n    createScene(key) {\r\n        const scene = this._factory[key];\r\n        return scene;\r\n    }\r\n    setFirstScene(key) {\r\n        this._nextScene = key;\r\n    }\r\n    changeScene(key) {\r\n        this._nextScene = key;\r\n    }\r\n    update() {\r\n        var _a, _b;\r\n        if (this._nowScene != this._nextScene) {\r\n            (_a = this._instance) === null || _a === void 0 ? void 0 : _a.root.remove();\r\n            if (this._nextScene) {\r\n                const newScene = this.createScene(this._nextScene);\r\n                this._instance = newScene;\r\n                this._nowScene = this._nextScene;\r\n                this._instance.init();\r\n            }\r\n        }\r\n        (_b = this._instance) === null || _b === void 0 ? void 0 : _b.update();\r\n    }\r\n    draw() {\r\n        if (this._instance) {\r\n            this._instance.draw();\r\n        }\r\n    }\r\n}\r\nexports.SceneMng = SceneMng;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/sceneMng.ts?");

/***/ }),

/***/ "./ts/app/scenes/gameScene.ts":
/*!************************************!*\
  !*** ./ts/app/scenes/gameScene.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameScene = void 0;\r\nconst sceneBase_1 = __webpack_require__(/*! @root/app/sceneBase */ \"./ts/app/sceneBase.ts\");\r\nconst samegameMngObj_1 = __webpack_require__(/*! @root/app/obj/samegameMngObj */ \"./ts/app/obj/samegameMngObj.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nconst objBase_1 = __webpack_require__(/*! @root/app/objBase */ \"./ts/app/objBase.ts\");\r\nconst IMAGE = __importStar(__webpack_require__(/*! @root/const/IMAGE */ \"./ts/const/IMAGE.ts\"));\r\nconst GAME = __importStar(__webpack_require__(/*! @root/const/GAME */ \"./ts/const/GAME.ts\"));\r\nconst class_1 = __webpack_require__(/*! @root/lib/class */ \"./ts/lib/class.ts\");\r\nclass GameScene extends sceneBase_1.SceneBase {\r\n    constructor() {\r\n        super();\r\n        this._samegame = new samegameMngObj_1.SamegameMngObj();\r\n        this.root.appendChild(this._samegame);\r\n    }\r\n    get samegame() {\r\n        return this._samegame;\r\n    }\r\n    init() {\r\n        const game_result = new objBase_1.ObjBase();\r\n        game_result.setImageInfo(IMAGE.SAMEGAME.RESULT, IMAGE.SAMEGAME.RESULT.CHIP, 10000);\r\n        game_result.setPos(new class_1.Position(GAME.CANVAS.SIZE.W / 2 - IMAGE.SAMEGAME.RESULT.CHIP.W / 2, GAME.CANVAS.SIZE.H / 2 - IMAGE.SAMEGAME.RESULT.CHIP.H * 0));\r\n        game_result.on('click', () => {\r\n            game_1.game.sceneMng.changeScene(\"title\");\r\n        });\r\n        if (game_result.image) {\r\n            game_result.image.active = false;\r\n        }\r\n        this.root.appendChild(game_result);\r\n        this.root.on('gameOver', () => {\r\n            setTimeout(() => {\r\n                if (game_result.image) {\r\n                    game_result.image.active = true;\r\n                }\r\n            }, 600);\r\n        });\r\n    }\r\n}\r\nexports.GameScene = GameScene;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/scenes/gameScene.ts?");

/***/ }),

/***/ "./ts/app/scenes/titleScene.ts":
/*!*************************************!*\
  !*** ./ts/app/scenes/titleScene.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TitleScene = void 0;\r\nconst IMAGE = __importStar(__webpack_require__(/*! @root/const/IMAGE */ \"./ts/const/IMAGE.ts\"));\r\nconst GAME = __importStar(__webpack_require__(/*! @root/const/GAME */ \"./ts/const/GAME.ts\"));\r\nconst sceneBase_1 = __webpack_require__(/*! @root/app/sceneBase */ \"./ts/app/sceneBase.ts\");\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\nconst objBase_1 = __webpack_require__(/*! @root/app/objBase */ \"./ts/app/objBase.ts\");\r\nclass TitleScene extends sceneBase_1.SceneBase {\r\n    init() {\r\n        // 背景画像\r\n        const bg_title = new objBase_1.ObjBase();\r\n        bg_title.setImageInfo(IMAGE.BG_TITLE, GAME.CANVAS.SIZE);\r\n        this.root.appendChild(bg_title);\r\n        // イベント設定\r\n        bg_title.on('click', () => {\r\n            game_1.game.sceneMng.changeScene(\"game\");\r\n        });\r\n    }\r\n}\r\nexports.TitleScene = TitleScene;\r\n\n\n//# sourceURL=webpack://samegame/./ts/app/scenes/titleScene.ts?");

/***/ }),

/***/ "./ts/const/GAME.ts":
/*!**************************!*\
  !*** ./ts/const/GAME.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BLOCKSIZE = exports.FPS = exports.DRAW_PRIORITY = exports.CANVAS = void 0;\r\n// 画面設定\r\nvar CANVAS;\r\n(function (CANVAS) {\r\n    let SIZE;\r\n    (function (SIZE) {\r\n        SIZE.W = 600;\r\n        SIZE.H = 480;\r\n    })(SIZE = CANVAS.SIZE || (CANVAS.SIZE = {}));\r\n})(CANVAS = exports.CANVAS || (exports.CANVAS = {}));\r\n// 描画順\r\nvar DRAW_PRIORITY;\r\n(function (DRAW_PRIORITY) {\r\n    DRAW_PRIORITY.MAX = 99999;\r\n    DRAW_PRIORITY.MIN = 0;\r\n    DRAW_PRIORITY.DEFAULT = 1000;\r\n})(DRAW_PRIORITY = exports.DRAW_PRIORITY || (exports.DRAW_PRIORITY = {}));\r\n// フレームレート\r\nexports.FPS = 30;\r\n// ゲーム\r\nexports.BLOCKSIZE = {\r\n    W: 24,\r\n    H: 24\r\n};\r\n\n\n//# sourceURL=webpack://samegame/./ts/const/GAME.ts?");

/***/ }),

/***/ "./ts/const/IMAGE.ts":
/*!***************************!*\
  !*** ./ts/const/IMAGE.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SAMEGAME = exports.BG_TITLE = exports.ACRYLIC_BOARD = void 0;\r\n// 透明板\r\nexports.ACRYLIC_BOARD = {\r\n    PATH: \"img/acrylic_board.png\",\r\n    CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n};\r\n// タイトル背景\r\nexports.BG_TITLE = {\r\n    PATH: \"img/title.png\",\r\n    CHIP: { X: 0, Y: 0, W: 1200, H: 960 }\r\n};\r\n// ゲーム構成要素\r\nexports.SAMEGAME = {\r\n    BLOCKLIST: [\r\n        {\r\n            PATH: \"img/block1.png\",\r\n            CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n        },\r\n        {\r\n            PATH: \"img/block2.png\",\r\n            CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n        },\r\n        {\r\n            PATH: \"img/block3.png\",\r\n            CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n        },\r\n        {\r\n            PATH: \"img/block4.png\",\r\n            CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n        },\r\n        {\r\n            PATH: \"img/block5.png\",\r\n            CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n        },\r\n        {\r\n            PATH: \"img/block6.png\",\r\n            CHIP: { X: 0, Y: 0, W: 32, H: 32 }\r\n        },\r\n    ],\r\n    RESULT: {\r\n        PATH: \"img/otsukare.png\",\r\n        CHIP: { X: 0, Y: 0, W: 480, H: 160 }\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://samegame/./ts/const/IMAGE.ts?");

/***/ }),

/***/ "./ts/index.ts":
/*!*********************!*\
  !*** ./ts/index.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst game_1 = __webpack_require__(/*! @root/app/core/game */ \"./ts/app/core/game.ts\");\r\ngame_1.game.Start();\r\n\n\n//# sourceURL=webpack://samegame/./ts/index.ts?");

/***/ }),

/***/ "./ts/lib/class.ts":
/*!*************************!*\
  !*** ./ts/lib/class.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Table = exports.Size = exports.Position = void 0;\r\nclass Position {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nexports.Position = Position;\r\nclass Size {\r\n    constructor(width = 0, height = 0) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\nexports.Size = Size;\r\nclass Table {\r\n    constructor(column = 0, record = 0) {\r\n        this.column = column;\r\n        this.record = record;\r\n    }\r\n}\r\nexports.Table = Table;\r\n\n\n//# sourceURL=webpack://samegame/./ts/lib/class.ts?");

/***/ }),

/***/ "./ts/lib/util.ts":
/*!************************!*\
  !*** ./ts/lib/util.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Time = exports.uniqueId = void 0;\r\nexports.uniqueId = (() => {\r\n    const max = 1000000;\r\n    let id1 = 0;\r\n    let id2 = 0;\r\n    let id3 = 0;\r\n    // 0埋め桁揃え\r\n    const digit = max.toString().length - 1;\r\n    const digitZero = Array(digit).join('0');\r\n    const zeroPadding = (num) => {\r\n        let numStr = num.toString();\r\n        return numStr.length > digit ? numStr : (digitZero + numStr).slice(-digit);\r\n    };\r\n    let latest = \"\";\r\n    let getId = (id1, id2, id3) => {\r\n        return \"id-\" + zeroPadding(id3) + \"-\" + zeroPadding(id2) + \"-\" + zeroPadding(id1);\r\n    };\r\n    // idオブジェクトを取得する\r\n    return {\r\n        \"create\": () => {\r\n            latest = getId(id1, id2, id3);\r\n            id1++;\r\n            if (id1 >= max) {\r\n                id1 = 0;\r\n                id2 += 1;\r\n            }\r\n            if (id2 >= max) {\r\n                id2 = 0;\r\n                id3 += 1;\r\n            }\r\n            return latest;\r\n        },\r\n        \"latest\": () => {\r\n            return latest;\r\n        }\r\n    };\r\n})();\r\n/**\r\n * 計測\r\n */\r\nclass Time {\r\n    constructor() {\r\n        this._startTime = 0;\r\n        this._endTime = 0;\r\n    }\r\n    /**\r\n     * 計測開始時間を取得する\r\n     */\r\n    get now() {\r\n        return performance.now(); //詳細なミリ秒数\r\n    }\r\n    /**\r\n     * 計測開始から停止までの時間を取得する\r\n     */\r\n    get result() {\r\n        return this._endTime - this._startTime;\r\n    }\r\n    /**\r\n     * 計測開始から現在までの時間を取得する\r\n     */\r\n    get elapse() {\r\n        return this.now - this._startTime;\r\n    }\r\n    /**\r\n     * 計測開始する\r\n     */\r\n    start() {\r\n        let now = this.now;\r\n        this._startTime = now;\r\n        this._endTime = now;\r\n        return this._startTime;\r\n    }\r\n    /**\r\n     * 計測を停止する\r\n     */\r\n    stop() {\r\n        this._endTime = this.now;\r\n        return this._endTime;\r\n    }\r\n    /**\r\n     * 停止位置から再計測する\r\n     */\r\n    restart() {\r\n        this._startTime = this._endTime;\r\n        return this._startTime;\r\n    }\r\n}\r\nexports.Time = Time;\r\n\n\n//# sourceURL=webpack://samegame/./ts/lib/util.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./ts/index.ts");
/******/ 	
/******/ })()
;